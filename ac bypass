loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua",true))()

--[[local getinfo = getinfo or debug.getinfo
local DEBUG = false
local Hooked = {}

local Detected, Kill

setthreadidentity(2)

for i, v in getgc(true) do
    if typeof(v) == "table" then
        local DetectFunc = rawget(v, "Detected")
        local KillFunc = rawget(v, "Kill")
    
        if typeof(DetectFunc) == "function" and not Detected then
            Detected = DetectFunc
            
            local Old; Old = hookfunction(Detected, function(Action, Info, NoCrash)
                if Action ~= "_" then
                    if DEBUG then
                        warn(`Adonis AntiCheat flagged\nMethod: {Action}\nInfo: {Info}`)
                    end
                end
                
                return true
            end)

            table.insert(Hooked, Detected)
        end

        if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
            Kill = KillFunc
            local Old; Old = hookfunction(Kill, function(Info)
                if DEBUG then
                    warn(`Adonis AntiCheat tried to kill (fallback): {Info}`)
                end
            end)

            table.insert(Hooked, Kill)
        end
    end
end

local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...)
    local LevelOrFunc, Info = ...

    if Detected and LevelOrFunc == Detected then
        if DEBUG then
            warn(`zins | adonis bypassed`)
        end

        return coroutine.yield(coroutine.running())
    end
    
    return Old(...)
end))
-- setthreadidentity(9)
setthreadidentity(7)

local _ax = getinfo or debug.getinfo

local _dbg = false

local _hk = {}

local _dt, _kl

local _lb = tick()

local _hi = 1

local _md = 5

setthreadidentity(2)

local function _cs()

    local _ct = tick()

    local _td = _ct - _lb

    

    if _td > _md then

        if _dbg then

            warn("Delay: " .. _td .. "s")

        end

        _lb = _ct

        return false

    end

    return true

end

local function _uh()

    _lb = tick()

    if _dbg then

        warn("Update: " .. _lb)

    end

end

for _i, _v in getgc(true) do

    if typeof(_v) == "table" then

        local _df = rawget(_v, "Detected")

        local _kf = rawget(_v, "Kill")

    

        if typeof(_df) == "function" and not _dt then

            _dt = _df

            

            local _od; _od = hookfunction(_dt, function(_ac, _in, _nc)

                if not _cs() then

                    if _dbg then

                        warn("Resync...")

                    end

                    _uh()

                end

                if _ac ~= "_" then

                    if _dbg then

                        warn(`Flag\nMethod: {_ac}\nInfo: {_in}`)

                    end

                end

                

                return true

            end)

            table.insert(_hk, _dt)

        end

        if rawget(_v, "Variables") and rawget(_v, "Process") and typeof(_kf) == "function" and not _kl then

            _kl = _kf

            local _ok; _ok = hookfunction(_kl, function(_if)

                if _dbg then

                    warn(`Attempt: {_if}`)

                end

            end)

            table.insert(_hk, _kl)

        end

    end

end

local _oh; _oh = hookfunction(getrenv().debug.info, newcclosure(function(...)

    local _lf, _inf = ...

    if _dt and _lf == _dt then

        if _dbg then

            warn(`bypass`)

        end

        return coroutine.yield(coroutine.running())

    end

    

    return _oh(...)

end))

spawn(function()

    while true do

        task.wait(_hi)

        if not _cs() then

            if _dbg then

                warn("Reestablishing...")

            end

            _uh()

        end

        game:GetService("RunService").Heartbeat:Wait()

    end

end)

setthreadidentity(7)

    for _, con in next, getconnections(workspace.CurrentCamera.Changed) do
        task.wait()
        con:Disable()
    end

    for _, con in next, getconnections(workspace.CurrentCamera:GetPropertyChangedSignal("CFrame")) do
        task.wait()
        con:Disable()
    end
end

for Key, Object in pairs(getgc(true)) do
    if type(Object) == "table" then
        setreadonly(Object, false)
        local indexInstance = rawget(Object, "indexInstance")
        if type(indexInstance) == "table" and indexInstance[1] == "kick" then
            setreadonly(indexInstance, false)
            rawset(Object, "Table", {"kick", function() coroutine.yield() end}) --> By using coroutine.yield() we are preventing script table from communicating with the server.
            warn("\n---[ INFO ]---\nBypassed Adonis Anti-Cheat/Anti-Exploit.\nBypass Method: Preventing Script Table From Communicating With The Server.")
            break
        end
    end
end


    Bypass = true

    local GameMT = getrawmetatable(game)
    -- Backup variables
    local OldIndexFunc = GameMT.__index;
    local OldNamecallFunc = GameMT.__namecall
    setreadonly(GameMT, false)
    if (Bypass == true) then
        -- This will be so laggy
        GameMT.__namecall = newcclosure(function(self, ...) 
            local NamecallArgs = {...}
    
            local DETECTION_STRINGS = 
            {
                'CHECKER_1';
                'CHECKER';
                'OneMoreTime';
                'checkingSPEED';
                'PERMAIDBAN';
                'BANREMOTE';
                'FORCEFIELD';
                'TeleportDetect';
            };
    
            if (table.find(DETECTION_STRINGS, NamecallArgs[1]) and getnamecallmethod() == 'FireServer') then 
                return;
            end;
            local suc, err = pcall(getfenv, 2)
            if not (err) then 
                if getfenv(2).crash then 
                    hookfunction(getfenv(2).crash, function() 
                        
                    end)
                end
            end
            return OldNamecallFunc(self, ...)
        end)
    end
]]
