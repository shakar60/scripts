loadstring(game:HttpGet("https://pastebin.com/raw/RY4WhKnW", true))()

loadstring(game:HttpGet("https://gist.githubusercontent.com/Nothingnesser1/4d874218d64fa8599b03784953dc0e19/raw/2f94ec59550e82bffadd8e7192c2781fa16ab799/main%2520Script"))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua",true))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/RelkzzRebranded/Bypassed---OBFUSCATED..../main/Adonis%20BYPASS.lua"))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/shakar60/universal-anticheat-bypass/refs/heads/main/script", true))()

for _, con in next, getconnections(workspace.CurrentCamera.Changed) do
    task.wait()
    con:Disable()
end

for _, con in next, getconnections(workspace.CurrentCamera:GetPropertyChangedSignal("CFrame")) do
    task.wait()
    con:Disable()
end

local getinfo = getinfo or debug.getinfo
local DEBUG = false
local Hooked = {}
local Detected, Kill = nil, nil

setthreadidentity(2)

for i, v in getgc(true) do
    if typeof(v) == "table" then
        local DetectFunc = rawget(v, "Detected")
        local KillFunc = rawget(v, "Kill")

        if typeof(DetectFunc) == "function" and not Detected then
            Detected = DetectFunc

            local OldDetect
            OldDetect = hookfunction(Detected, function(Action, Info, NoCrash)
                if Action ~= "_" then
                    return true
                end
            end)

            table.insert(Hooked, Detected)
        end

        if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
            Kill = KillFunc

            local OldKill
            OldKill = hookfunction(Kill, function(Info)
            end)

            table.insert(Hooked, Kill)
        end
    end
end

local OldDebugInfo
OldDebugInfo = hookfunction(getrenv().debug.info, newcclosure(function(...)
    local LevelOrFunc, Info = ...

    if Detected and LevelOrFunc == Detected then
        return coroutine.yield(coroutine.running())
    end

    return OldDebugInfo(...)
end))

local Bypass = true
local GameMT = getrawmetatable(game)
local OldIndexFunc = GameMT.__index
local OldNamecallFunc = GameMT.__namecall

setreadonly(GameMT, false)

if Bypass then
    GameMT.__namecall = newcclosure(function(self, ...)
        local NamecallArgs = {...}

        local DETECTION_STRINGS = {
            'CHECKER_1', 'CHECKER', 'OneMoreTime', 'checkingSPEED', 'PERMAIDBAN',
            'BANREMOTE', 'FORCEFIELD', 'TeleportDetect'
        }

        if (table.find(DETECTION_STRINGS, NamecallArgs[1]) and getnamecallmethod() == 'FireServer') then
            return
        end

        local suc, err = pcall(getfenv, 2)
        if not err then
            if getfenv(2).crash then
                hookfunction(getfenv(2).crash, function() end)
            end
        end

        return OldNamecallFunc(self, ...)
    end)
end
